exit
recipe.each_value{|v|p v.length}
recipe.each_value{|v| v.length}
recipe
recipe.each_value{|v|p v}
exit
next
recipe.class
reciperecipe.class
recipe[1].class
recipe.values.class
recipe.values
exit
result.length
result.class
result
exit
next
result.length
result.empty?
result
reesult
exit
next
search_para
next
search_para
result
next
search_para
exit
result
letter_check(search_para)
search_para = '125'
search_para
search_para.class
letter_check(search_para)
exit
check('125')
check(125)
def  check(str) str[/[a-z]+/]  == str end
check(125)
check
def  check(str) str[/[a-z]+/]  = str end
check(str) str[/[a-z]+/]  = str end
letter_check(125)
exit
recipe[:ingredients]
recipe[:ingredients]= recipe[:ingredients].split('')
recipe[:ingredients]
recipe[:ingredients].split('')
recipe
arecipe
exit
next
exit
recipe
exit
next
exit
test.class
test = @new_recipe.read_recipes
test
test = @new_recipe.write_recipes
@new_recipe.write_recipes.class
@new_recipe.read_recipes.length
@new_recipe.read_recipes.class
@new_recipe.read_recipes
@new_recipe.length
@new_recipe
exit
next
table
next
terminal_key['name']
terminal_key = list[num-1]
num.class
list.class
list
terminal_key
next
nex
next
rows
next
list
next
recipe
next
list.length
list.class
exit
@new_recipe.read_recipes.class
@new_recipe.read_recipes.length
@new_recipe.length
@new_recipe
next
@results
next
arr[-2]
arr
next
@new_recipe.length
@new_recipe
next
arr[-2]
arr.length
arr.class
exit
arr[-1]
arr
arr.length
arr.delete_at(74)
arr.length
arr
num
exit
next
list.length
list.class
list
exit
next
search_para
exit
result.length
result
next
search_para = 'egg'
search_para
next
target = 'pasta'
target = 'pasta
target
next
target = 'egg'
target
exit
@new_recipe.read_recipes.map{|recipe|p recipe['ingredients'].join(' ').include? ' mayonnaise'}
@new_recipe.read_recipes.each{|recipe|p recipe['ingredients'].join(' ').include? 'cup mayonnaise'}
@new_recipe.read_recipes.each{|recipe|p recipe['ingredients'].split(' ').include? 'cup mayonnaise'}
@new_recipe.read_recipes.each{|recipe|p recipe['ingredients'].include? 'cup mayonnaise'}
@new_recipe.read_recipes.each{|recipe|recipe['ingredients'].include? 'cup mayonnaise'}
@new_recipe.read_recipes.each{|recipe|recipe['ingredients'].include? 'tomato'}
@new_recipe.read_recipes.map{|recipe|recipe['ingredients'].include? 'tomato'}
@new_recipe.read_recipes.map{|recipe|p recipe['ingredients'].class}
@new_recipe.read_recipes.map{|recipe|recipe['ingredients'].include? 'can'}
@new_recipe.read_recipes.map{|recipe|recipe['ingredients'].include? 'egg'}
@new_recipe.read_recipes.map{|recipe|recipe['ingredients'].include? 'eggs'}
@new_recipe.read_recipes.map{|recipe|recipe['ingredients'].each{|ing|p ing.class  }} 
@new_recipe.read_recipes.map{|recipe|recipe['ingredients'].each{|ing|ing.class  }} 
ing_check =  @new_recipe.read_recipes.map{|recipe|recipe['ingredients'].each{|ing|ing.class }} 
ing_check =  @new_recipe.read_recipes.map{|recipe|recipe['ingredients'].each{|ing|ing.include? 'egg' ? teest << recipe : next }} 
ing_check.length
ing_check.class
ing_check =  @new_recipe.read_recipes.map{|recipe|recipe['ingredients'].each{|ing|ing.include? 'egg' }} 
@new_recipe.read_recipes.map{|recipe|recipe['ingredients'].each{|ing|ing.include? 'egg'  }} 
@new_recipe.read_recipes.map{|recipe|recipe['ingredients'].each{|ing|ing.include? 'egg'  }} teest << recipe
@new_recipe.read_recipes.map{|recipe|recipe['ingredients'].each{|ing|ing.include? 'egg'  } teest << recipe }
@new_recipe.read_recipes.map{|recipe|recipe['ingredients'].each{|ing|ing.include? 'egg'  } teest << recipe}
@new_recipe.read_recipes.map{|recipe|recipe['ingredients'].each{|ing|ing.include? 'egg'  }}
@new_recipe.read_recipes.map{|recipe|recipe['ingredients'].each{|ing|ing.include? 'egg' teest << recipe }}
@new_recipe.read_recipes.map{|recipe|recipe['ingredients'].each{|ing|ing.include? 'egg' teest << recipe}}
teest = []
@new_recipe.read_recipes.map{|recipe|recipe['ingredients'].each{|ing|ing.include? 'egg'}}
@new_recipe.read_recipes.map{|recipe|recipe['ingredients'].each{|ing|ing.include? 'egg'}
@new_recipe.read_recipes.map{|recipe|recipe['ingredients'].include? 'egg'}
@new_recipe.read_recipes.map{|recipe|recipe['ingredients'].class}
@new_recipe.read_recipes.map{|recipe|recipe['ingredients'].each{|ing| p  ing.include? 'egg'}}
@new_recipe.read_recipes.map{|recipe|recipe['ingredients'].map{|ing|  ing.include? 'egg'}}
@new_recipe.read_recipes.map{|recipe|p recipe['ingredients'].map{|ing| p ing.include? 'egg'}}
@new_recipe.read_recipes.map{|recipe|p recipe['ingredients'].map{|ing| p ing.class}}
@new_recipe.read_recipes.map{|recipe|p recipe['ingredients'].class}
@new_recipe.read_recipes.map{|recipe|p recipe['ingredients']}
@new_recipe.read_recipes.map{|recipe|p recipe.keys}
@new_recipe.read_recipes.map{|recipe|p recipe.class}
@new_recipe.read_recipes.class
test = @new_recipe.read_recipes.map {|recipe|recipe['ingredients'].include? 'eggs' ? recipe : false  }
test = @new_recipe.read_recipes.map {|recipe|if recipe['ingredients'].include? 'eggs'}
@new_recipe.read_recipes[0].class
@new_recipe.read_recipes.length
@new_recipe.read_recipes.class
exit
@recipebook.length
@recipebook.class
@new_recipe.read_recipes.class
@new_recipe.read_recipes.length
@new_recipe.read_recipes
 @new_recipe.show_last_recipe(@new_recipe.read_recipes)
 @new_recipe.show_last_recipe(@new_recipe.read_recipes
@new_recipe[-1]
@new_recipe
next
@new_recipe.read_recipes[61]['name']
@new_recipe.read_recipes.length
@new_recipe.read_recipes.class
@new_recipe.class
@new_recipe.results.class
@new_recipe.results
new_recipe.results
@new_recipe
@new_recipee
exit
next
exit
next
file
next
file
next
recipebook
next
read_recipes
recipebook
next
recipe.class
recipe
next
recipe
next
recipe
reecipe
@recipebook
next
recipe.class
recipe
exit
res[:ingredients]
res['ingredients']
@results
res
exit
next
exit
res
exit
@results
exit
@results
@file [-2]
@file [-1]
exit
@file
exit
res
exit
@new_recipe[-1]
next
exit
@new_recipe.length
@new_recipe
@newrecipe
@new_recipe.class
next
exit
@new_recipe.select_recipe(-1)
